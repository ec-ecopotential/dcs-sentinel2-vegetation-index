#!/bin/bash

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}

set -x 

# define the exit codes
SUCCESS=0
ERR_NO_RESOLUTION=5
ERR_DOWNLOAD_1C=10
ERR_GRANULE_DIR=15
ERR_SEN2COR=20
ERR_LEVEL_2A_DIR=25
ERR_COMPRESSION=30
ERR_PUBLISH=35

# add a trap to exit gracefully
function cleanExit ()
{
  local retval=$?
  local msg=""
  case "${retval}" in
    ${SUCCESS}) msg="Processing successfully concluded";;
    ${ERR_NO_RESOLUTION}) msg="No target resolution provided, must be one of 10, 20 or 60";;
    ${ERR_DOWNLOAD_1C}) msg="Failed to retrieve Sentinel-2 Level 1C product";;
    ${ERR_GRANULE_DIR}) msg="Couldn't find the Sentinel-2 Level 1C product granule directory";;
    ${ERR_SEN2COR}) msg="SEN2COR main binary L2A_Process failed";;
    ${ERR_LEVEL_2A_DIR}) msg="Couldn't find the Sentinel-2 Level 2A product";;
    ${ERR_COMPRESSION}) msg="Failed to compress the Sentinel-2 Level 2A product";;
    ${ERR_PUBLISH}) msg="Failed to publish the Sentinel-2 Level 2A product";;
    *) msg="Unknown error";;
  esac

  [ "${retval}" != "0" ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
  exit ${retval}
}

trap cleanExit EXIT

function setOTBenv() {
    
  . /etc/profile.d/otb.sh

  export otb_ram=2048
  export GDAL_DATA=/usr/share/gdal/
}

function getGain() {

  local band=$1
  local product_id=$2

  gain=$( cat ${product_id}/*_MTL.txt | grep REFLECTANCE_MULT_BAND_${band} | cut -d "=" -f 2 | tr -d " " )

  echo ${gain}

}

function getOffset() {

  local band=$1
  local product_id=$2
 
  offset=$( cat ${product_id}/*_MTL.txt | grep REFLECTANCE_ADD_BAND_${band} | cut -d "=" -f 2 | tr -d " " )

  echo ${offset}

}

function DNtoReflectance() {

  local band=$1
  local base_name=$2

  gain=$( getGain ${band} ${base_name} )
  offset=$( getOffset ${band} ${base_name} )

  otbcli_BandMath \
    -il ${base_name}/${base_name}_B${band}.TIF \
    -exp "${gain} * im1b1 + ${offset}" \
    -out ${base_name}/REFLECTANCE_B${band}.TIF

  return $?
}

function calcVegetation() {
  local index=$1
  local s2l2a=$2
  local expression=""

  case $index in
    NDVI)  
      # NDVI
      expression=" im1b7 >= 0 && im1b7 <= 1 && im1b4 >= 0 && im1b4 <= 1 ? ( im1b7 - im1b4 ) / ( im1b7 + im1b4 ) : 0 "
      ;; 
    ND45) 
      # NDI45
      expression=" im1b5 >= 0 && im1b5 <= 1 && im1b4 >= 0 && im1b4 <= 1 ? ( im1b5 - im1b4 ) / ( im1b5 + im1b4 ) : 0 " 
      ;;  
    MTCI)
      # MTCI
      expression=" im1b5 >= 0 && im1b5 <= 1 && im1b4 >= 0 && im1b4 <= 1 && im1b6 >= 0 && im1b6 && im1b5 - im1b4 != 0 ? ( im1b6 - im1b5 ) / ( im1b5 - im1b4 ) : 0  "
      ;; 
   MCARI)
      #MCARI
      expression=" im1b5 >= 0 && im1b5 <= 1 && im1b4 >= 0 && im1b4 <= 1 && im1b3 >= 0 && im1b3 <= 1 ? (( im1b5 - im1b4 ) - 0.2 * ( im1b5 - im1b3 )) * ( im1b5 - im1b4 ) : 0 " \
      ;;
   GNDVI)
      #GNDVI
      expression=" im1b7 >= 0 && im1b7 <= 1 && im1b3 >= 0 && im1b3 <= 1 ? ( im1b7 - im1b3 ) / ( im1b7 + im1b3 ) : 0 " 
      ;;
   PSSRa)
      #PSSRa
      expression=" im1b7 >= 0 && im1b7 <= 1 && im1b4 >= 0 && im1b4 <= 1 && im1b4 != 0 ? im1b7 / im1b4 : 0 " 
      ;;
   S2REP)
      #S2REP
      expression=" im1b7 >= 0 && im1b7 <= 1 && im1b4 >= 0 && im1b4 <= 1 && im1b5 >= 0 && im1b5 <= 1 && im1b6 >= 0 && im1b6 <= 1 ? 705 + 35 * (((( im1b7 + im1b4 ) / 2 ) - im1b5 ) / ( im1b6 - im1b5 ))  : 0 " 
      ;;
   IRECI)
     #IRECI
     expression=" im1b7 >= 0 && im1b7 <= 1 && im1b4 >= 0 && im1b4 <= 1 && im1b6 >= 0 && im1b6 <= 1 && im1b6 != 0 ? ( im1b7 - im1b4 ) / ( im1b5 / im1b6 ) : 0 " \
     ;;   
   *)
     return ${ERR_UNKNOWN_VI}
     ;;
  esac

  otbcli_BandMath \
    -il ${s2l2a}.tif \
    -exp ${expression} \
    -out ${s2l2a}_${index}.TIF

  gdalwarp \
    -r cubic \
    -wm 8192 \
    -multi \
    -srcnodata "0 0 0" \
    -dstnodata "0 0 0" \
    -dstalpha \
    -wo OPTIMIZE_SIZE=TRUE \
    -wo UNIFIED_SRC_NODATA=YES \
    -t_srs EPSG:4326 \
    -co TILED=YES\
    -co COMPRESS=LZW\
    ${s2l2a}_${index}.TIF \
    ${s2l2a}_${index}_4326.TIF

  rm -f ${s2l2a}_${index}.TIF
}

function main() {

  # set OTB environment
  setOTBenv

  cd ${TMPDIR}

  while read input
  do 
    ciop-log "INFO" "Retrieve Sentinel-2 Level 2A product ${input}"

    local_resource="$( echo ${input} | ciop-copy -z -O ${TMPDIR} - )"

    ciop-log "INFO" "Convert Sentinel-2 Level 2A product to geotiff"
   
    identifier=$( tar tfz ${local_resource} | head -n 1 | sed 's/SAFE/xml/')

    identifier=$( basename ${identifier} | sed 's/.SAFE//' )
 
    tar xfz ${local_resource} || return ${ERR_EXTRACT}

    ciop-log "INFO" "Process vegetation indexes for ${identifier}"

    cd ${identifier}.SAFE

    metadata="$(  find . -maxdepth 1 -name "S2A*.xml" )"
    # convert to geotif with gdal >2.1
 
    counter=1

    gdalinfo ${metadata} 2> /dev/null | grep -E  "SUBDATASET_._NAME" | grep -v "PREVIEW" | cut -d "=" -f 2 | while read subset
    do 
      gdal_translate ${subset} ${identifier}_${counter}.TIF

      for index in LSWI NBR NDVI MNDWI
      do 
     
        calcVegetation ${index} ${identifier}_${counter} || return ${ERR_CALC_VI}

        ciop-log "INFO" "Publish vegeatation index ${index}"
        ciop-publish -m ${TMPDIR}/${identifier}.SAFE/${identifier}_${counter}_${index}_4326.TIF
        
        rm -f ${TMPDIR}/${identifier}.SAFE/${identifier}_${counter}_${index}_4326.TIF
      done
  
      rm -f ${identifier}_${counter}.TIF
      counter=$((counter+1))
    done
  done

}

cat | main || exit $?
